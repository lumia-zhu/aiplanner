/**
 * AIÂ∑•‰ΩúÊµÅËæÖÂä©Hook
 * Ë¥üË¥£ÁÆ°ÁêÜAIËæÖÂä©ÂÆåÂñÑËÆ°ÂàíÁöÑÁä∂ÊÄÅÂíåÈÄªËæë
 */

import { useState, useCallback } from 'react'
import type { Task, UserProfile, WorkflowMode, AIRecommendation, ChatMessage } from '@/types'
import { analyzeTasksForWorkflow, getTodayTasks, generateDetailedTaskSummary } from '@/lib/workflowAnalyzer'

interface UseWorkflowAssistantProps {
  tasks: Task[]
  userProfile: UserProfile | null
  setChatMessages: (messages: ChatMessage[] | ((prev: ChatMessage[]) => ChatMessage[])) => void
}

interface UseWorkflowAssistantReturn {
  // Áä∂ÊÄÅ
  workflowMode: WorkflowMode
  aiRecommendation: AIRecommendation | null
  isAnalyzing: boolean
  
  // ÊñπÊ≥ï
  startWorkflow: () => Promise<void>
  selectOption: (optionId: 'A' | 'B' | 'C') => void
  resetWorkflow: () => void
}

/**
 * AIÂ∑•‰ΩúÊµÅËæÖÂä©Hook
 */
export function useWorkflowAssistant({
  tasks,
  userProfile,
  setChatMessages
}: UseWorkflowAssistantProps): UseWorkflowAssistantReturn {
  
  const [workflowMode, setWorkflowMode] = useState<WorkflowMode>('initial')
  const [aiRecommendation, setAIRecommendation] = useState<AIRecommendation | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)

  /**
   * ÂºÄÂßãÂ∑•‰ΩúÊµÅ: ÂàÜÊûê‰ªªÂä°Âπ∂ÁîüÊàêÊé®Ëçê
   */
  const startWorkflow = useCallback(async () => {
    try {
      setIsAnalyzing(true)
      setWorkflowMode('initial')
      
      // Ëé∑Âèñ‰ªäÂ§©ÁöÑ‰ªªÂä°
      const todayTasks = getTodayTasks(tasks)
      
      // Ë∞ÉÁî®ÂàÜÊûêÊúçÂä°
      const recommendation = await analyzeTasksForWorkflow(tasks, userProfile)
      setAIRecommendation(recommendation)
      
      // ÁîüÊàêËØ¶ÁªÜ‰ªªÂä°ÊëòË¶Å(ÂåÖÂê´‰ªªÂä°ÂàóË°®)
      const detailedSummary = generateDetailedTaskSummary(todayTasks)
      
      // ÁîüÊàêÁΩÆ‰ø°Â∫¶ÊòæÁ§∫
      const confidenceEmoji = 
        recommendation.confidence === 'high' ? '‚≠ê‚≠ê‚≠ê' :
        recommendation.confidence === 'medium' ? '‚≠ê‚≠ê' : '‚≠ê'
      const confidenceText = 
        recommendation.confidence === 'high' ? 'È´ò' : 
        recommendation.confidence === 'medium' ? '‰∏≠' : '‰Ωé'
      
      // ÊûÑÂª∫AIÊ∂àÊÅØ
      const aiMessage = `üìã ‰ªäÂ§©ÁöÑ‰ªªÂä°ÂàÜÊûê

${detailedSummary}

---

üí° ÊàëÁöÑÂª∫ËÆÆ:
${recommendation.reason}

---

ËØ∑ÈÄâÊã©‰Ω†ÊÉ≥ÂÅö‰ªÄ‰πà:`
      
      // Ê∑ªÂä†Âà∞ËÅäÂ§©Ê∂àÊÅØ
      setChatMessages(prev => [
        ...prev,
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: aiMessage
            }
          ]
        }
      ])
      
    } catch (error) {
      console.error('Â∑•‰ΩúÊµÅÂàÜÊûêÂ§±Ë¥•:', error)
      
      // Ê∑ªÂä†ÈîôËØØÊ∂àÊÅØ
      setChatMessages(prev => [
        ...prev,
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: '‚ùå Êä±Ê≠â,ÂàÜÊûê‰ªªÂä°Êó∂Âá∫Áé∞‰∫ÜÈóÆÈ¢ò„ÄÇËØ∑Á®çÂêéÂÜçËØï„ÄÇ'
            }
          ]
        }
      ])
    } finally {
      setIsAnalyzing(false)
    }
  }, [tasks, userProfile, setChatMessages])

  /**
   * Áî®Êà∑ÈÄâÊã©ÈÄâÈ°π
   */
  const selectOption = useCallback((optionId: 'A' | 'B' | 'C') => {
    if (optionId === 'A') {
      // ÈÄâÊã©ÂÆåÂñÑÂçï‰∏™‰ªªÂä°
      setWorkflowMode('single-task')
      
      setChatMessages(prev => [
        ...prev,
        {
          role: 'user',
          content: [{ type: 'text', text: 'üîç ÈÄâÈ°πA: ÂÆåÂñÑÂçï‰∏™‰ªªÂä°' }]
        },
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: '‚úÖ Â•ΩÁöÑ!Êàë‰ºöÂ∏Æ‰Ω†ÈÄê‰∏™ÂÆåÂñÑ‰ªªÂä°„ÄÇ\n\n**ÂäüËÉΩÂºÄÂèë‰∏≠...**\n\nÊ≠§ÂäüËÉΩÂ∞ÜÂåÖÊã¨:\n‚Ä¢ üìù ÊæÑÊ∏Ö‰ªªÂä°ÁªÜËäÇ\n‚Ä¢ üî® ÊãÜËß£Â§çÊùÇ‰ªªÂä°\n‚Ä¢ ‚è±Ô∏è ‰º∞ËÆ°ÊâßË°åÊó∂Èó¥\n\nÊï¨ËØ∑ÊúüÂæÖ! üöÄ'
            }
          ]
        }
      ])
      
    } else if (optionId === 'B') {
      // ÈÄâÊã©‰ºòÂÖàÁ∫ßÊéíÂ∫è
      setWorkflowMode('priority-sort')
      
      setChatMessages(prev => [
        ...prev,
        {
          role: 'user',
          content: [{ type: 'text', text: 'üìä ÈÄâÈ°πB: ÂØπÊâÄÊúâ‰ªªÂä°ÂÅö‰ºòÂÖàÁ∫ßÊéíÂ∫è' }]
        },
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: '‚úÖ Â•ΩÁöÑ!Êàë‰ºöÂ∏Æ‰Ω†ÊéíÂàó‰ªªÂä°‰ºòÂÖàÁ∫ß„ÄÇ\n\n**ÂäüËÉΩÂºÄÂèë‰∏≠...**\n\nÊ≠§ÂäüËÉΩÂ∞ÜÂåÖÊã¨:\n‚Ä¢ üî• ËâæÊ£ÆË±™Â®ÅÂ∞îÁü©Èòµ(Á¥ßÊÄ•/ÈáçË¶Å)\n‚Ä¢ üí™ Âä™Âäõ/ÂΩ±ÂìçÁü©Èòµ\n‚Ä¢ üòä Ë∂£Âë≥/Âà∫ÊøÄÁü©Èòµ\n\nÊï¨ËØ∑ÊúüÂæÖ! üöÄ'
            }
          ]
        }
      ])
      
    } else if (optionId === 'C') {
      // ÁªìÊùüAIËæÖÂä©
      setWorkflowMode('ended')
      
      setChatMessages(prev => [
        ...prev,
        {
          role: 'user',
          content: [{ type: 'text', text: '‚úÖ ÈÄâÈ°πC: ÁªìÊùüAIËæÖÂä©' }]
        },
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: 'üëã Â•ΩÁöÑ!AIËæÖÂä©Â∑≤ÁªìÊùü„ÄÇ\n\nÂ¶ÇÊûúÈúÄË¶ÅÂ∏ÆÂä©,ÈöèÊó∂ÁÇπÂáª"‰∏ã‰∏ÄÊ≠•,AIËæÖÂä©ÂÆåÂñÑËÆ°Âàí"ÊåâÈíÆÂç≥ÂèØ„ÄÇÁ•ù‰Ω†È´òÊïàÂÆåÊàê‰ªªÂä°! üí™'
            }
          ]
        }
      ])
    }
  }, [setChatMessages])

  /**
   * ÈáçÁΩÆÂ∑•‰ΩúÊµÅÁä∂ÊÄÅ
   */
  const resetWorkflow = useCallback(() => {
    setWorkflowMode('initial')
    setAIRecommendation(null)
    setIsAnalyzing(false)
  }, [])

  return {
    workflowMode,
    aiRecommendation,
    isAnalyzing,
    startWorkflow,
    selectOption,
    resetWorkflow
  }
}

