/**
 * AIÂ∑•‰ΩúÊµÅËæÖÂä©Hook
 * Ë¥üË¥£ÁÆ°ÁêÜAIËæÖÂä©ÂÆåÂñÑËÆ°ÂàíÁöÑÁä∂ÊÄÅÂíåÈÄªËæë
 */

import { useState, useCallback } from 'react'
import type { Task, UserProfile, WorkflowMode, AIRecommendation, PrioritySortFeeling } from '@/types'
import type { ChatMessage } from '@/lib/doubaoService'
import { analyzeTasksForWorkflow, getTodayTasks, generateDetailedTaskSummary } from '@/lib/workflowAnalyzer'
import { getMatrixTypeByFeeling, getMatrixConfig } from '@/types'

interface UseWorkflowAssistantProps {
  tasks: Task[]
  userProfile: UserProfile | null
  setChatMessages: (messages: ChatMessage[] | ((prev: ChatMessage[]) => ChatMessage[])) => void
}

interface UseWorkflowAssistantReturn {
  // Áä∂ÊÄÅ
  workflowMode: WorkflowMode
  aiRecommendation: AIRecommendation | null
  isAnalyzing: boolean
  selectedFeeling: PrioritySortFeeling | null
  
  // ÊñπÊ≥ï
  startWorkflow: () => Promise<void>
  selectOption: (optionId: 'A' | 'B' | 'C') => void
  selectFeeling: (feeling: PrioritySortFeeling) => void
  resetWorkflow: () => void
}

/**
 * AIÂ∑•‰ΩúÊµÅËæÖÂä©Hook
 */
export function useWorkflowAssistant({
  tasks,
  userProfile,
  setChatMessages
}: UseWorkflowAssistantProps): UseWorkflowAssistantReturn {
  
  const [workflowMode, setWorkflowMode] = useState<WorkflowMode>('initial')
  const [aiRecommendation, setAIRecommendation] = useState<AIRecommendation | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [selectedFeeling, setSelectedFeeling] = useState<PrioritySortFeeling | null>(null)

  /**
   * ÂºÄÂßãÂ∑•‰ΩúÊµÅ: ÂàÜÊûê‰ªªÂä°Âπ∂ÁîüÊàêÊé®Ëçê
   */
  const startWorkflow = useCallback(async () => {
    try {
      setIsAnalyzing(true)
      setWorkflowMode('initial')
      
      // Ëé∑Âèñ‰ªäÂ§©ÁöÑ‰ªªÂä°
      const todayTasks = getTodayTasks(tasks)
      
      // Ë∞ÉÁî®ÂàÜÊûêÊúçÂä°
      const recommendation = await analyzeTasksForWorkflow(tasks, userProfile)
      setAIRecommendation(recommendation)
      
      // ÁîüÊàêËØ¶ÁªÜ‰ªªÂä°ÊëòË¶Å(ÂåÖÂê´‰ªªÂä°ÂàóË°®)
      const detailedSummary = generateDetailedTaskSummary(todayTasks)
      
      // ÁîüÊàêÁΩÆ‰ø°Â∫¶ÊòæÁ§∫
      const confidenceEmoji = 
        recommendation.confidence === 'high' ? '‚≠ê‚≠ê‚≠ê' :
        recommendation.confidence === 'medium' ? '‚≠ê‚≠ê' : '‚≠ê'
      const confidenceText = 
        recommendation.confidence === 'high' ? 'È´ò' : 
        recommendation.confidence === 'medium' ? '‰∏≠' : '‰Ωé'
      
      // ÊûÑÂª∫AIÊ∂àÊÅØ
      const aiMessage = `üìã ‰ªäÂ§©ÁöÑ‰ªªÂä°ÂàÜÊûê

${detailedSummary}

---

üí° ÊàëÁöÑÂª∫ËÆÆ:
${recommendation.reason}

---

ËØ∑ÈÄâÊã©‰Ω†ÊÉ≥ÂÅö‰ªÄ‰πà:`
      
      // Ê∑ªÂä†Âà∞ËÅäÂ§©Ê∂àÊÅØ
      setChatMessages(prev => [
        ...prev,
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: aiMessage
            }
          ]
        }
      ])
      
    } catch (error) {
      console.error('Â∑•‰ΩúÊµÅÂàÜÊûêÂ§±Ë¥•:', error)
      
      // Ê∑ªÂä†ÈîôËØØÊ∂àÊÅØ
      setChatMessages(prev => [
        ...prev,
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: '‚ùå Êä±Ê≠â,ÂàÜÊûê‰ªªÂä°Êó∂Âá∫Áé∞‰∫ÜÈóÆÈ¢ò„ÄÇËØ∑Á®çÂêéÂÜçËØï„ÄÇ'
            }
          ]
        }
      ])
    } finally {
      setIsAnalyzing(false)
    }
  }, [tasks, userProfile, setChatMessages])

  /**
   * Áî®Êà∑ÈÄâÊã©ÈÄâÈ°π
   */
  const selectOption = useCallback((optionId: 'A' | 'B' | 'C') => {
    if (optionId === 'A') {
      // ÈÄâÊã©ÂÆåÂñÑÂçï‰∏™‰ªªÂä°
      setWorkflowMode('single-task')
      
      setChatMessages(prev => [
        ...prev,
        {
          role: 'user',
          content: [{ type: 'text', text: 'üîç ÈÄâÈ°πA: ÂÆåÂñÑÂçï‰∏™‰ªªÂä°' }]
        },
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: '‚úÖ Â•ΩÁöÑ!Êàë‰ºöÂ∏Æ‰Ω†ÈÄê‰∏™ÂÆåÂñÑ‰ªªÂä°„ÄÇ\n\n**ÂäüËÉΩÂºÄÂèë‰∏≠...**\n\nÊ≠§ÂäüËÉΩÂ∞ÜÂåÖÊã¨:\n‚Ä¢ üìù ÊæÑÊ∏Ö‰ªªÂä°ÁªÜËäÇ\n‚Ä¢ üî® ÊãÜËß£Â§çÊùÇ‰ªªÂä°\n‚Ä¢ ‚è±Ô∏è ‰º∞ËÆ°ÊâßË°åÊó∂Èó¥\n\nÊï¨ËØ∑ÊúüÂæÖ! üöÄ'
            }
          ]
        }
      ])
      
    } else if (optionId === 'B') {
      // ÈÄâÊã©‰ºòÂÖàÁ∫ßÊéíÂ∫è - ËøõÂÖ•ËØ¢ÈóÆÊÑüËßâÈò∂ÊÆµ
      setWorkflowMode('priority-feeling')
      
      setChatMessages(prev => [
        ...prev,
        {
          role: 'user',
          content: [{ type: 'text', text: 'üìä ÈÄâÈ°πB: ÂØπÊâÄÊúâ‰ªªÂä°ÂÅö‰ºòÂÖàÁ∫ßÊéíÂ∫è' }]
        },
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: 'Â•ΩÁöÑ!Âú®ÂºÄÂßãÊéíÂ∫è‰πãÂâç,ÊàëÊÉ≥‰∫ÜËß£‰∏Ä‰∏ã:\n\n‰Ω†Áé∞Âú®‰∏ªË¶ÅÁöÑÊÑüËßâÊòØ‰ªÄ‰πà? ËøôÂ∞ÜÂ∏ÆÂä©ÊàëÊé®ËçêÊúÄÈÄÇÂêà‰Ω†ÁöÑÊéíÂ∫èÊñπÊ≥ï:'
            }
          ]
        }
      ])
      
    } else if (optionId === 'C') {
      // ÁªìÊùüAIËæÖÂä©
      setWorkflowMode('ended')
      
      setChatMessages(prev => [
        ...prev,
        {
          role: 'user',
          content: [{ type: 'text', text: '‚úÖ ÈÄâÈ°πC: ÁªìÊùüAIËæÖÂä©' }]
        },
        {
          role: 'assistant',
          content: [
            {
              type: 'text',
              text: 'üëã Â•ΩÁöÑ!AIËæÖÂä©Â∑≤ÁªìÊùü„ÄÇ\n\nÂ¶ÇÊûúÈúÄË¶ÅÂ∏ÆÂä©,ÈöèÊó∂ÁÇπÂáª"‰∏ã‰∏ÄÊ≠•,AIËæÖÂä©ÂÆåÂñÑËÆ°Âàí"ÊåâÈíÆÂç≥ÂèØ„ÄÇÁ•ù‰Ω†È´òÊïàÂÆåÊàê‰ªªÂä°! üí™'
            }
          ]
        }
      ])
    }
  }, [setChatMessages])

  /**
   * Áî®Êà∑ÈÄâÊã©ÊÑüËßâÈÄâÈ°π
   */
  const selectFeeling = useCallback((feeling: PrioritySortFeeling) => {
    if (feeling === 'back') {
      // ËøîÂõûÂàùÂßãÁä∂ÊÄÅ
      setWorkflowMode('initial')
      setSelectedFeeling(null)
      setChatMessages(prev => [
        ...prev,
        {
          role: 'user',
          content: [{ type: 'text', text: '‚Ü©Ô∏è ËøîÂõû‰∏ä‰∏ÄÁ∫ß' }]
        },
        {
          role: 'assistant',
          content: [{
            type: 'text',
            text: 'Â•ΩÁöÑ,Â∑≤ËøîÂõû‰∏ä‰∏ÄÁ∫ß„ÄÇËØ∑ÈáçÊñ∞ÈÄâÊã©‰Ω†ÊÉ≥ÂÅö‰ªÄ‰πà:'
          }]
        }
      ])
      return
    }
    
    // ÈÄâÊã©‰∫ÜÊÑüËßâÈÄâÈ°πA/B/C
    setSelectedFeeling(feeling)
    setWorkflowMode('priority-matrix')
    
    // Ëé∑ÂèñÂØπÂ∫îÁöÑÁü©ÈòµÁ±ªÂûãÂíåÈÖçÁΩÆ
    const matrixType = getMatrixTypeByFeeling(feeling)
    
    if (!matrixType) return
    
    const config = getMatrixConfig(matrixType)
    
    // ÊÑüËßâÈÄâÈ°πÊò†Â∞Ñ
    const feelingMap = {
      urgent: { 
        emoji: 'üî•',
        label: 'Êà™Ê≠¢Êó•Êúü‰∏¥Ëøë'
      },
      overwhelmed: { 
        emoji: 'ü§î',
        label: '‰ªªÂä°Â§™Â§öÂ§™‰π±'
      },
      blank: { 
        emoji: 'üò´',
        label: 'Â§ßËÑë‰∏ÄÁâáÁ©∫ÁôΩ'
      }
    }
    
    const selected = feelingMap[feeling]
    
    // Ê†πÊçÆ‰∏çÂêåÁ±ªÂûãÁîüÊàê‰∏çÂêåÁöÑÂºïÂØºÊ∂àÊÅØ
    let guideMessage = ''
    
    if (feeling === 'urgent') {
      guideMessage = `Â•ΩÁöÑ!Êàë‰ª¨Êù•Áî®„Äê${config.title}„ÄëÂø´ÈÄüÂàÜÁ±ª‰ªäÂ§©ÁöÑ‰ªªÂä°~

Ëøô‰∏™Áü©Èòµ‰ºöÂ∏Æ‰Ω†Êää‰ªªÂä°ÂàÜÊàêÂõõ‰∏™Ë±°Èôê:
üìç ${config.quadrants.q1.label}: ${config.quadrants.q1.description}
üìç ${config.quadrants.q2.label}: ${config.quadrants.q2.description}
üìç ${config.quadrants.q3.label}: ${config.quadrants.q3.description}
üìç ${config.quadrants.q4.label}: ${config.quadrants.q4.description}

ËØ∑Âú®ÂºπÂá∫ÁöÑÁü©Èòµ‰∏≠ÊãñÊãΩ‰ªªÂä°ËøõË°åÂàÜÁ±ªÂêß! üëá`
    } else if (feeling === 'overwhelmed') {
      guideMessage = `Â•ΩÁöÑ!Êàë‰ª¨Êù•Áî®„Äê${config.title}„ÄëÊâæÂà∞"È´òÂõûÊä•"ÁöÑ‰ªªÂä°~

Ëøô‰∏™Áü©Èòµ‰ºöÂ∏Æ‰Ω†ËØÜÂà´:
üéØ ${config.quadrants.q2.label}: ${config.quadrants.q2.description} - Ëøô‰∫õÊòØÊúÄÂÄºÂæóÂÅöÁöÑ!
üíé ${config.quadrants.q1.label}: ${config.quadrants.q1.description}
‚ö†Ô∏è ${config.quadrants.q3.label}: ${config.quadrants.q3.description}
‚úÖ ${config.quadrants.q4.label}: ${config.quadrants.q4.description}

ËØ∑Âú®ÂºπÂá∫ÁöÑÁü©Èòµ‰∏≠ÊãñÊãΩ‰ªªÂä°ËøõË°åÂàÜÁ±ªÂêß! üëá`
    } else if (feeling === 'blank') {
      guideMessage = `Â•ΩÁöÑ!Êàë‰ª¨Êù•Áî®„Äê${config.title}„ÄëÊâæÂà∞‰Ω†ÊÉ≥ÂÅöÁöÑ‰ªªÂä°~

Ëøô‰∏™Áü©Èòµ‰ºöÂ∏Æ‰Ω†ÂèëÁé∞:
üåü ${config.quadrants.q1.label}: ${config.quadrants.q1.description}
‚ö° ${config.quadrants.q2.label}: ${config.quadrants.q2.description}
üò¥ ${config.quadrants.q3.label}: ${config.quadrants.q3.description}
üòä ${config.quadrants.q4.label}: ${config.quadrants.q4.description}

ËØ∑Âú®ÂºπÂá∫ÁöÑÁü©Èòµ‰∏≠ÊãñÊãΩ‰ªªÂä°ËøõË°åÂàÜÁ±ªÂêß! üëá`
    }
    
    setChatMessages(prev => [
      ...prev,
      {
        role: 'user',
        content: [{ type: 'text', text: `${selected.emoji} ${selected.label}` }]
      },
      {
        role: 'assistant',
        content: [{
          type: 'text',
          text: guideMessage
        }]
      }
    ])
  }, [setChatMessages])

  /**
   * ÈáçÁΩÆÂ∑•‰ΩúÊµÅÁä∂ÊÄÅ
   */
  const resetWorkflow = useCallback(() => {
    setWorkflowMode('initial')
    setAIRecommendation(null)
    setIsAnalyzing(false)
    setSelectedFeeling(null)
  }, [])

  return {
    workflowMode,
    aiRecommendation,
    isAnalyzing,
    selectedFeeling,
    startWorkflow,
    selectOption,
    selectFeeling,
    resetWorkflow
  }
}

